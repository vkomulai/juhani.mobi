service:
  name: aws-nodejs-typescript
plugins:
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  region: us-east-1
  usagePlan:
    quota:
      limit: 50000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  environment:
    BASIC_AUTH_USER: ${ssm:/juhani.mobi/BASIC_AUTH_USER}
    BASIC_AUTH_PASSWORD: ${ssm:/juhani.mobi/BASIC_AUTH_PASSWORD~true}
    prod_api_host: api
    dev_api_host: api-dev
    RECIPES_TABLE: "Recipes-${opt:stage, self:provider.stage}"
    CATEGORY_TABLE: "Categories-${opt:stage, self:provider.stage}"
    LISTS_TABLE: "Lists-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.RECIPES_TABLE}
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.CATEGORY_TABLE}
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.LISTS_TABLE}
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:lambda"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "function:${self:service}-${opt:stage, self:provider.stage}-*"
custom:
  serverless-offline:
    port: 4000
  customDomain:
    domainName: "${self:provider.environment.${opt:stage, 'dev'}_api_host}.juhani.mobi"
    certificateName: "${self:provider.environment.${opt:stage, 'dev'}_api_host}.juhani.mobi"
    createRoute53Record: true
    basePath: ""
    stage: "${opt:stage, 'dev'}"
    endpointType: regional
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
  warmup:
    default: prod
    folderName: _warmup
    cleanFolder: false
    memorySize: 128
    name: "warmpup-juhani-api-${opt:stage, 'dev'}"
    schedule: cron(0/5 7-22 ? * * *)
    timeout: 20
    prewarm: true
    tags:
      Application: "${self:service}"
functions:
  api:
    handler: src/server.handler
    warmup: true
    events:
      - http:
          path: /
          method: ANY
          cors: true
          private: false
      - http:
          path: "/{any+}"
          method: ANY
          cors: true
          private: false
